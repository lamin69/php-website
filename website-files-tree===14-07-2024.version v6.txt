
## /home/lamine/php-website/register.php

<?php
require_once 'config.php';
require_once 'auth.php';

// Check if the user is already logged in
if (isLoggedIn()) {
    header("Location: index.php");
    exit();
}

$error = '';

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $username = sanitize_input($_POST['username']);
    $password = $_POST['password'];

    if (register($username, $password)) {
        $message = "Registration successful. You can now log in.";
        header("Location: index.php?page=login&message=" . urlencode($message));
        exit();
    } else {
        $error = "Registration failed. Please try again.";
    }
}
?>

<?php include 'includes/header.php'; ?>

<h2>Register</h2>

<?php if ($error): ?>
    <p class="error"><?php echo $error; ?></p>
<?php endif; ?>

<form method="post" action="">
    <label for="username">Username:</label>
    <input type="text" id="username" name="username" required><br>

    <label for="password">Password:</label>
    <input type="password" id="password" name="password" required><br>

    <input type="submit" value="Register">
</form>

<?php include 'includes/footer.php'; ?>


## /home/lamine/php-website/file_operations.php

<?php
function listFiles($dir) {
    $files = scandir($dir);
    $result = [];
    foreach ($files as $file) {
        if ($file != "." && $file != "..") {
            $path = $dir . '/' . $file;
            $result[] = [
                'name' => $file,
                'path' => $path,
                'type' => is_dir($path) ? 'directory' : 'file',
                'size' => filesize($path),
                'lastModified' => date("Y-m-d H:i:s", filemtime($path))
            ];
        }
    }
    return $result;
}

function createDirectory($path) {
    return mkdir($path, 0755, true);
}

function deleteFile($path) {
    return unlink($path);
}

function deleteDirectory($path) {
    $files = array_diff(scandir($path), array('.', '..'));
    foreach ($files as $file) {
        is_dir("$path/$file") ? deleteDirectory("$path/$file") : unlink("$path/$file");
    }
    return rmdir($path);
}

function renameFile($oldPath, $newPath) {
    return rename($oldPath, $newPath);
}

function moveFile($sourcePath, $destPath) {
    return rename($sourcePath, $destPath);
}

function copyFile($sourcePath, $destPath) {
    return copy($sourcePath, $destPath);
}

## /home/lamine/php-website/test_db.php

<?php
$servername = "localhost"; // Or 127.0.0.1
$username = "db";
$password = ".hIrR2_)w3X40f_]IrR2_40f_]";
$dbname = "db";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
} 
echo "Connected successfully";

$conn->close();
?>


## /home/lamine/php-website/login.php

<?php
require_once 'config.php';
require_once 'auth.php';

// Check if the user is already logged in
if (isLoggedIn()) {
    header("Location: index.php");
    exit();
}

$error = '';

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $username = sanitize_input($_POST['username']);
    $password = $_POST['password'];

    if (login($username, $password)) {
        header("Location: index.php");
        exit();
    } else {
        $error = "Invalid username or password";
    }
}
?>

<?php include 'includes/header.php'; ?>

<h2>Login</h2>

<?php if ($error): ?>
    <p class="error"><?php echo $error; ?></p>
<?php endif; ?>

<form method="post" action="">
    <label for="username">Username:</label>
    <input type="text" id="username" name="username" required><br>

    <label for="password">Password:</label>
    <input type="password" id="password" name="password" required><br>

    <input type="submit" value="Login">
</form>

<p>Don't have an account? <a href="register.php">Register here</a></p>

<?php include 'includes/footer.php'; ?>

## /home/lamine/php-website/download.php

<?php
require_once 'config.php';
require_once 'auth.php';

// Ensure the user is logged in
if (!isLoggedIn()) {
    header('Location: login.php');
    exit();
}

if (isset($_GET['file'])) {
    $file_path = $_GET['file'];
    
    // Validate the file path (you may want to add more security checks here)
    if (!file_exists($file_path)) {
        die("File not found.");
    }

    // Get the file name
    $file_name = basename($file_path);

    // Set headers
    header("Cache-Control: public");
    header("Content-Description: File Transfer");
    header("Content-Disposition: attachment; filename=$file_name");
    header("Content-Type: application/octet-stream");
    header("Content-Transfer-Encoding: binary");

    // Read the file and output it to the browser
    readfile($file_path);
    exit;
} else {
    die("No file specified.");
}

## /home/lamine/php-website/config.php

<?php
// Database configuration
define('DB_HOST', 'localhost');
define('DB_NAME', 'db');
define('DB_USER', 'db');
define('DB_PASS', '.hIrR2_)w3X40f_]IrR2_40f_]');

// Define base path only if not already defined
defined('BASE_PATH') or define('BASE_PATH', __DIR__ . '/..'); 

// Database connection
try {
    $pdo = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USER, DB_PASS);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    error_log("Database connection failed: " . $e->getMessage());
    die("ERROR: Could not connect to the database."); 
}
?>


## /home/lamine/php-website/index.php

<?php
session_start();

// Define BASE_URL
define('BASE_URL', 'http://192.168.1.39/'); // Update with your actual domain

// Include configuration and necessary files
require_once 'config.php';
require_once 'auth.php';
require_once 'file_operations.php';

// Check if user is logged in, if not redirect to login page
if (!isLoggedIn() && basename($_SERVER['PHP_SELF']) !== 'login.php') {
    header('Location: ' . BASE_URL . 'login.php');
    exit();
}

// Determine which page to load (default to home)
$page = isset($_GET['page']) ? $_GET['page'] : 'home';

// Include header
include 'includes/header.php';
?>

<div class="container">
    <h1><?php echo APP_NAME; ?></h1>

    <?php include 'includes/navbar.php'; ?>

    <div id="main-content">
        <?php
        // Load the appropriate page
        switch ($page) {
            case 'home':
                include 'pages/home.php';
                break;
            case 'file_explorer':
                include 'pages/file_explorer.php';
                break;
            case 'profile_manager':
                include 'pages/profile_manager.php';
                break;
            case 'login':
                include 'login.php'; // Include login.php directly
                break;
            default:
                include 'pages/404.php';
                break;
        }
        ?>
    </div>
</div>

<?php
// Include footer
include 'includes/footer.php';
?>

## /home/lamine/php-website/auth.php

<?php
require_once 'config.php';

function isLoggedIn() {
    return isset($_SESSION['user_id']);
}

function login($username, $password) {
    global $pdo;
    
    $username = sanitize_input($username);
    
    $stmt = $pdo->prepare("SELECT id, username, password FROM users WHERE username = :username");
    $stmt->bindParam(':username', $username, PDO::PARAM_STR);
    $stmt->execute();
    
    if ($stmt->rowCount() == 1) {
        $user = $stmt->fetch(PDO::FETCH_ASSOC);
        if (password_verify($password, $user['password'])) {
            $_SESSION['user_id'] = $user['id'];
            $_SESSION['username'] = $user['username'];
            return true;
        }
    }
    
    return false;
}

function logout() {
    session_unset();
    session_destroy();
}

function register($username, $password) {
    global $pdo;
    
    $username = sanitize_input($username);
    $hashed_password = password_hash($password, PASSWORD_DEFAULT);
    
    $stmt = $pdo->prepare("INSERT INTO users (username, password) VALUES (:username, :password)");
    $stmt->bindParam(':username', $username, PDO::PARAM_STR);
    $stmt->bindParam(':password', $hashed_password, PDO::PARAM_STR);
    
    return $stmt->execute();
}

## /home/lamine/php-website/logout.php

<?php
require_once 'config.php';
require_once 'auth.php';

// Perform logout
logout();

// Redirect to login page
header("Location: login.php");
exit();

## /home/lamine/php-website/upload.php

<?php
require_once 'config.php';
require_once 'auth.php';

// Ensure the user is logged in
if (!isLoggedIn()) {
    header('Location: login.php');
    exit();
}

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $current_dir = $_POST['current_dir'];
    $target_dir = $current_dir . '/';
    $target_file = $target_dir . basename($_FILES["fileToUpload"]["name"]);
    $uploadOk = 1;
    $imageFileType = strtolower(pathinfo($target_file,PATHINFO_EXTENSION));

    // Check if file already exists
    if (file_exists($target_file)) {
        $error = "Sorry, file already exists.";
        $uploadOk = 0;
    }

    // Check file size (limit to 5MB)
    if ($_FILES["fileToUpload"]["size"] > 5000000) {
        $error = "Sorry, your file is too large.";
        $uploadOk = 0;
    }

    // Allow certain file formats
    $allowed_extensions = array("jpg", "jpeg", "png", "gif", "pdf", "doc", "docx", "txt");
    if (!in_array($imageFileType, $allowed_extensions)) {
        $error = "Sorry, only JPG, JPEG, PNG, GIF, PDF, DOC, DOCX & TXT files are allowed.";
        $uploadOk = 0;
    }

    // Check if $uploadOk is set to 0 by an error
    if ($uploadOk == 0) {
        $error = "Sorry, your file was not uploaded.";
    // If everything is ok, try to upload file
    } else {
        if (move_uploaded_file($_FILES["fileToUpload"]["tmp_name"], $target_file)) {
            $message = "The file ". basename( $_FILES["fileToUpload"]["name"]). " has been uploaded.";
        } else {
            $error = "Sorry, there was an error uploading your file.";
        }
    }
}

// Redirect back to file explorer
header("Location: index.php?page=file_explorer&dir=" . urlencode($current_dir) . "&message=" . urlencode($message) . "&error=" . urlencode($error));
exit();

## /home/lamine/php-website/HELLOWWORLDindex.php

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple File List</title>
</head>
<body>
    <h1>Hello World</h1>
    
    <h2>File List:</h2>
    <ul>
        <?php
        $files = ['file1.txt', 'file2.txt', 'file3.txt'];
        foreach ($files as $file) {
            echo "<li>$file</li>";
        }
        ?>
    </ul>
</body>
</html>


## /home/lamine/php-website/pages/profile_manager.php

<?php
// Ensure the user is logged in
if (!isLoggedIn()) {
    header('Location: login.php');
    exit();
}

// Include database connection
require_once 'config.php';

// Function to get user profiles
function getUserProfiles($userId) {
    global $pdo;
    $stmt = $pdo->prepare("SELECT * FROM profiles WHERE user_id = :user_id");
    $stmt->bindParam(':user_id', $userId, PDO::PARAM_INT);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to add a new profile
function addProfile($userId, $profileName, $host, $port, $username) {
    global $pdo;
    $stmt = $pdo->prepare("INSERT INTO profiles (user_id, profile_name, host, port, username) VALUES (:user_id, :profile_name, :host, :port, :username)");
    $stmt->bindParam(':user_id', $userId, PDO::PARAM_INT);
    $stmt->bindParam(':profile_name', $profileName, PDO::PARAM_STR);
    $stmt->bindParam(':host', $host, PDO::PARAM_STR);
    $stmt->bindParam(':port', $port, PDO::PARAM_INT);
    $stmt->bindParam(':username', $username, PDO::PARAM_STR);
    return $stmt->execute();
}

// Handle form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $profileName = sanitize_input($_POST['profile_name']);
    $host = sanitize_input($_POST['host']);
    $port = intval($_POST['port']);
    $username = sanitize_input($_POST['username']);
    
    if (addProfile($_SESSION['user_id'], $profileName, $host, $port, $username)) {
        $message = "Profile added successfully.";
    } else {
        $error = "Error adding profile.";
    }
}

// Get user profiles
$profiles = getUserProfiles($_SESSION['user_id']);
?>

<h2>Profile Manager</h2>

<?php if (isset($message)): ?>
    <p class="success"><?php echo $message; ?></p>
<?php endif; ?>

<?php if (isset($error)): ?>
    <p class="error"><?php echo $error; ?></p>
<?php endif; ?>

<h3>Add New Profile</h3>
<form method="post" action="">
    <label for="profile_name">Profile Name:</label>
    <input type="text" id="profile_name" name="profile_name" required><br>

    <label for="host">Host:</label>
    <input type="text" id="host" name="host" required><br>

    <label for="port">Port:</label>
    <input type="number" id="port" name="port" value="22" required><br>

    <label for="username">Username:</label>
    <input type="text" id="username" name="username" required><br>

    <input type="submit" value="Add Profile">
</form>

<h3>Your Profiles</h3>
<table>
    <thead>
        <tr>
            <th>Profile Name</th>
            <th>Host</th>
            <th>Port</th>
            <th>Username</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        <?php foreach ($profiles as $profile): ?>
        <tr>
            <td><?php echo htmlspecialchars($profile['profile_name']); ?></td>
            <td><?php echo htmlspecialchars($profile['host']); ?></td>
            <td><?php echo $profile['port']; ?></td>
            <td><?php echo htmlspecialchars($profile['username']); ?td>
            <td>
                <a href="?page=file_explorer&profile_id=<?php echo $profile['id']; ?>">Use</a>
                <a href="?page=edit_profile&id=<?php echo $profile['id']; ?>">Edit</a>
                <a href="?page=delete_profile&id=<?php echo $profile['id']; ?>" onclick="return confirm('Are you sure you want to delete this profile?');">Delete</a>
            </td>
        </tr>
        <?php endforeach; ?>
    </tbody>
</table>

## /home/lamine/php-website/pages/home.php

<?php
// Ensure the user is logged in
if (!isLoggedIn()) {
    header('Location: login.php');
    exit();
}
?>

<h2>Welcome to the All-in-One File Client</h2>
<p>This application allows you to manage files across various storage systems.</p>

<div class="dashboard">
    <h3>Quick Actions</h3>
    <ul>
        <li><a href="?page=file_explorer">Explore Files</a></li>
        <li><a href="?page=profile_manager">Manage Profiles</a></li>
    </ul>
</div>

<div class="recent-activity">
    <h3>Recent Activity</h3>
    <!-- You can add code here to display recent file operations or user activity -->
    <p>No recent activity to display.</p>
</div>

## /home/lamine/php-website/pages/file_explorer.php

<?php
// Ensure the user is logged in
if (!isLoggedIn()) {
    header('Location: login.php');
    exit();
}

// Include file operations functions
require_once '../file_operations.php';

// Get current directory (default to user's home directory)
$current_dir = isset($_GET['dir']) ? $_GET['dir'] : "/home/" . $_SESSION['username'];

// ... rest of the file_explorer.php code ...


## /home/lamine/php-website/css/styles.css

.button {
  background-color: #007bff; /* Blue background */
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  cursor: pointer;
  border-radius: 5px; /* Rounded corners */
  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2); /* Shadow */
  transition: 0.3s; /* Add transition for hover effect */
}

.button:hover {
  box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2); /* Larger shadow on hover */
}


## /home/lamine/php-website/includes/navbar.php

<nav>
    <ul>
        <li><a href="<?php echo BASE_URL; ?>index.php">Home</a></li>
        <li><a href="<?php echo BASE_URL; ?>index.php?page=file_explorer">File Explorer</a></li>
        <li><a href="<?php echo BASE_URL; ?>index.php?page=profile_manager">Profile Manager</a></li>
        <?php if (isLoggedIn()): ?>
            <li><a href="<?php echo BASE_URL; ?>logout.php">Logout</a></li>
        <?php else: ?>
            <li><a href="<?php echo BASE_URL; ?>index.php?page=login">Login</a></li> 
        <?php endif; ?>
    </ul>
</nav>


## /home/lamine/php-website/includes/header.php

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?php echo APP_NAME; ?> - <?php echo $pageTitle ?? 'Welcome'; ?></title>
    <link rel="stylesheet" href="<?php echo BASE_URL; ?>css/styles.css">
    <script src="<?php echo BASE_URL; ?>js/main.js" defer></script>
</head>
<body>
    <header>
        <h1><?php echo APP_NAME; ?></h1>
    </header>
    <nav>
        <ul>
            <li><a href="<?php echo BASE_URL; ?>index.php">Home</a></li>
            <li><a href="<?php echo BASE_URL; ?>index.php?page=file_explorer">File Explorer</a></li>
            <li><a href="<?php echo BASE_URL; ?>index.php?page=profile_manager">Profile Manager</a></li>
            <?php if (isLoggedIn()): ?>
                <li><a href="<?php echo BASE_URL; ?>logout.php">Logout</a></li>
            <?php else: ?>
                <li><a href="<?php echo BASE_URL; ?>login.php">Login</a></li>
            <?php endif; ?>
        </ul>
    </nav>
    <main class="container">
        <?php
        if (isset($_SESSION['message'])) {
            echo '<div class="message ' . $_SESSION['message_type'] . '">' . $_SESSION['message'] . '</div>';
            unset($_SESSION['message']);
            unset($_SESSION['message_type']);
        }
        ?>

## /home/lamine/php-website/includes/footer.php

<?php
// Ensure this file is included, not accessed directly
if (!defined('BASE_PATH')) {
    die('Direct access to this file is not allowed.');
}
?>
    </main>
    <footer>
        <p>&copy; <?php echo date("Y"); ?> <?php echo APP_NAME; ?>. All rights reserved.</p>
    </footer>
    <script src="<?php echo BASE_URL; ?>js/main.js"></script>
    <?php
    // Check if there are any additional scripts to be included
    if (isset($additionalScripts) && is_array($additionalScripts)) {
        foreach ($additionalScripts as $script) {
            echo "<script src=\"" . BASE_URL . "js/" . $script . "\"></script>\n";
        }
    }
    ?>
</body>
</html>

## /home/lamine/php-website/js/main.js

document.addEventListener('DOMContentLoaded', function() {
    // File upload preview
    const fileInput = document.getElementById('fileToUpload');
    if (fileInput) {
        fileInput.addEventListener('change', function(e) {
            const fileName = e.target.files[0].name;
            alert('File selected: ' + fileName);
        });
    }

    // Confirm delete
    const deleteLinks = document.querySelectorAll('.delete-file');
    deleteLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            if (!confirm('Are you sure you want to delete this file?')) {
                e.preventDefault();
            }
        });
    });

    // Directory creation
    const createDirForm = document.getElementById('create-directory-form');
    if (createDirForm) {
        createDirForm.addEventListener('submit', function(e) {
            const dirName = document.getElementById('new-dir-name').value;
            if (!dirName.trim()) {
                alert('Please enter a directory name');
                e.preventDefault();
            }
        });
    }
});


## /home/lamine/php-website/myenv/lib/python3.8/site-packages/urllib3/contrib/emscripten/emscripten_fetch_worker.js

let Status = {
  SUCCESS_HEADER: -1,
  SUCCESS_EOF: -2,
  ERROR_TIMEOUT: -3,
  ERROR_EXCEPTION: -4,
};

let connections = {};
let nextConnectionID = 1;
const encoder = new TextEncoder();

self.addEventListener("message", async function (event) {
  if (event.data.close) {
    let connectionID = event.data.close;
    delete connections[connectionID];
    return;
  } else if (event.data.getMore) {
    let connectionID = event.data.getMore;
    let { curOffset, value, reader, intBuffer, byteBuffer } =
      connections[connectionID];
    // if we still have some in buffer, then just send it back straight away
    if (!value || curOffset >= value.length) {
      // read another buffer if required
      try {
        let readResponse = await reader.read();

        if (readResponse.done) {
          // read everything - clear connection and return
          delete connections[connectionID];
          Atomics.store(intBuffer, 0, Status.SUCCESS_EOF);
          Atomics.notify(intBuffer, 0);
          // finished reading successfully
          // return from event handler
          return;
        }
        curOffset = 0;
        connections[connectionID].value = readResponse.value;
        value = readResponse.value;
      } catch (error) {
        console.log("Request exception:", error);
        let errorBytes = encoder.encode(error.message);
        let written = errorBytes.length;
        byteBuffer.set(errorBytes);
        intBuffer[1] = written;
        Atomics.store(intBuffer, 0, Status.ERROR_EXCEPTION);
        Atomics.notify(intBuffer, 0);
      }
    }

    // send as much buffer as we can
    let curLen = value.length - curOffset;
    if (curLen > byteBuffer.length) {
      curLen = byteBuffer.length;
    }
    byteBuffer.set(value.subarray(curOffset, curOffset + curLen), 0);

    Atomics.store(intBuffer, 0, curLen); // store current length in bytes
    Atomics.notify(intBuffer, 0);
    curOffset += curLen;
    connections[connectionID].curOffset = curOffset;

    return;
  } else {
    // start fetch
    let connectionID = nextConnectionID;
    nextConnectionID += 1;
    const intBuffer = new Int32Array(event.data.buffer);
    const byteBuffer = new Uint8Array(event.data.buffer, 8);
    try {
      const response = await fetch(event.data.url, event.data.fetchParams);
      // return the headers first via textencoder
      var headers = [];
      for (const pair of response.headers.entries()) {
        headers.push([pair[0], pair[1]]);
      }
      let headerObj = {
        headers: headers,
        status: response.status,
        connectionID,
      };
      const headerText = JSON.stringify(headerObj);
      let headerBytes = encoder.encode(headerText);
      let written = headerBytes.length;
      byteBuffer.set(headerBytes);
      intBuffer[1] = written;
      // make a connection
      connections[connectionID] = {
        reader: response.body.getReader(),
        intBuffer: intBuffer,
        byteBuffer: byteBuffer,
        value: undefined,
        curOffset: 0,
      };
      // set header ready
      Atomics.store(intBuffer, 0, Status.SUCCESS_HEADER);
      Atomics.notify(intBuffer, 0);
      // all fetching after this goes through a new postmessage call with getMore
      // this allows for parallel requests
    } catch (error) {
      console.log("Request exception:", error);
      let errorBytes = encoder.encode(error.message);
      let written = errorBytes.length;
      byteBuffer.set(errorBytes);
      intBuffer[1] = written;
      Atomics.store(intBuffer, 0, Status.ERROR_EXCEPTION);
      Atomics.notify(intBuffer, 0);
    }
  }
});
self.postMessage({ inited: true });

